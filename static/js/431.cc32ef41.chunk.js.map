{"version":3,"file":"static/js/431.cc32ef41.chunk.js","mappings":"6OAEaA,EAAmBC,EAAAA,GAAAA,GAAH,oY,SCwB7B,EArBgB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAIjB,OACE,UAACN,EAAD,WACGG,EADH,KACWC,GACT,mBAAQG,KAAK,SAASC,QALL,kBAAMH,GAASI,EAAAA,EAAAA,IAAcP,GAA7B,EAKjB,sBAKL,EClBYQ,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEtBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAEvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,EAInBC,EAAuB,SAAAP,GAClC,IAAMC,EAAWF,EAAeC,GAC1BQ,EAJoB,SAAAR,GAAK,OAAIA,EAAMS,MAAV,CAIRC,CAAaV,GAEpC,OAAOC,EAASQ,QAAO,SAAAE,GAAO,OAC5BA,EAAQnB,KAAKoB,cAAcC,SAASL,EAAeI,cADvB,GAG/B,ECmBD,EAxBoB,WAClB,IAAMlB,GAAWC,EAAAA,EAAAA,MAEXmB,GAAiBC,EAAAA,EAAAA,IAAYR,GAC7BH,GAAYW,EAAAA,EAAAA,IAAYZ,GACxBG,GAAQS,EAAAA,EAAAA,IAAYV,GAM1B,OAJAW,EAAAA,EAAAA,YAAU,WACRtB,GAASuB,EAAAA,EAAAA,MACV,GAAE,CAACvB,KAGF,iCACE,wBACGoB,EAAeI,KAAI,gBAAG3B,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OAClB,SAAC,EAAD,CAAkBF,GAAIA,EAAIC,KAAMA,EAAMC,OAAQA,GAAhCF,EADI,MAIrBa,IAAa,+CACbE,IAAS,uBAAIA,MAGnB,E,UC9BYa,EAAuB7B,EAAAA,GAAAA,KAAH,6tBCiBtB8B,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAClC,EAAImC,GAWvD,OAREnC,IAFFmC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,ECXdG,EACE,GADFA,EAEI,GAgFV,EA7EoB,WAClB,OAAwBC,EAAAA,EAAAA,UAASD,GAAjC,eAAOrC,EAAP,KAAauC,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAASD,GAArC,eAAOpC,EAAP,KAAeuC,EAAf,KACM/B,GAAWc,EAAAA,EAAAA,IAAYhB,GACvBL,GAAWC,EAAAA,EAAAA,MAEXsC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,MAChC,OADoD,EAAb3C,MAErC,IAAK,OACHuC,EAAQI,GACR,MAEF,IAAK,SACHH,EAAUG,GACV,MAEF,QACEC,QAAQC,IAAI,sBAEjB,EAsBKC,EAAQ,WACZP,EAAQF,GACRG,EAAUH,EACX,EAED,OACE,UAACV,EAAD,CAAsBoB,SA1BH,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAa,CACjBnD,GAAI6B,IACJ5B,KAAAA,EACAC,OAAAA,GAGmBQ,EAAS0C,MAC5B,SAAAhC,GAAO,OAAIA,EAAQnB,KAAKoB,gBAAkB8B,EAAWlD,KAAKoB,aAAnD,IAIPgC,MAAM,GAAD,OAAIF,EAAWlD,KAAf,6BAGPE,GAASmD,EAAAA,EAAAA,IAAWH,IACpBJ,IACD,EAQC,WACE,qCAEE,kBACEQ,SAAUb,EACVrC,KAAK,OACLJ,KAAK,OACL2C,MAAO3C,EACPuD,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,uCAEE,kBACEH,SAAUb,EACVrC,KAAK,MACLJ,KAAK,SACL2C,MAAO1C,EACPsD,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQrD,KAAK,SAAb,2BAGL,ECjFc,SAASsD,IACtB,IAAMxD,GAAWC,EAAAA,EAAAA,MACXS,GAAYW,EAAAA,EAAAA,IAAYZ,GAM9B,OAJAa,EAAAA,EAAAA,YAAU,WACRtB,GAASuB,EAAAA,EAAAA,MACV,GAAE,CAACvB,KAGF,iCACE,8CACA,SAAC,EAAD,KACA,yBAAMU,GAAa,4BACnB,SAAC,EAAD,MAGL,C","sources":["components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","redux/selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContactContainer = styled.li`\n  padding: 4px;\n  font-size: 18px;\n\n  & button {\n    margin-left: 12px;\n    cursor: pointer;\n    padding: 4px;\n    width: 60px;\n    background-color: #fff;\n    border: 1px solid #757575;\n    border-radius: 5px;\n    font-size: 13px;\n\n    &:hover {\n      background-color: #6c9fec;\n    }\n    &:active {\n      background-color: #5b86c7;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ContactContainer } from './Contact.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <ContactContainer>\n      {name}: {number}\n      <button type=\"button\" onClick={handleDelete}>\n        Delete\n      </button>\n    </ContactContainer>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default Contact;\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilterContacts = state => {\n  const contacts = selectContacts(state);\n  const contactsFilter = selectFilter(state);\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(contactsFilter.toLowerCase())\n  );\n};\n","import Contact from 'components/Contact/Contact';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectFilterContacts,\n  selectIsLoading,\n  selectError,\n} from 'redux/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  const filterContacts = useSelector(selectFilterContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ul>\n        {filterContacts.map(({ id, name, number }) => (\n          <Contact key={id} id={id} name={name} number={number} />\n        ))}\n      </ul>\n      {isLoading && <p>Loading contacts...</p>}\n      {error && <p>{error}</p>}\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const ContactFormContainer = styled.form`\n  margin: 0;\n  padding: 8px;\n  font-size: 18px;\n  border: 1px solid #000000;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  width: 350px;\n\n  & label {\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n  }\n\n  & input {\n    padding: 4px;\n    width: 150px;\n    outline: none;\n    border: 1px solid #939699;\n\n    &:focus {\n      border-color: #6c9fec;\n    }\n  }\n\n  & button {\n    cursor: pointer;\n    padding: 4px;\n    width: 100px;\n    background-color: #fff;\n    border: 1px solid #757575;\n    border-radius: 5px;\n    font-size: 13px;\n\n    &:hover {\n      background-color: #6c9fec;\n    }\n    &:active {\n      background-color: #5b86c7;\n    }\n  }\n`;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/selectors';\nimport { ContactFormContainer } from './ContactForm.styled';\nimport { nanoid } from 'nanoid';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const [name, setName] = useState(INITIAL_STATE.name);\n  const [number, setNumber] = useState(INITIAL_STATE.number);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { value, name } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        console.log('Invalid field name');\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    const isInContacts = contacts.some(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    if (isInContacts) {\n      alert(`${newContact.name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(newContact));\n    reset();\n  };\n\n  const reset = () => {\n    setName(INITIAL_STATE.name);\n    setNumber(INITIAL_STATE.number);\n  };\n\n  return (\n    <ContactFormContainer onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </ContactFormContainer>\n  );\n};\n\nexport default ContactForm;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { selectIsLoading } from 'redux/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <title>Your contacts</title>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["ContactContainer","styled","id","name","number","dispatch","useDispatch","type","onClick","deleteContact","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilterContacts","contactsFilter","filter","selectFilter","contact","toLowerCase","includes","filterContacts","useSelector","useEffect","fetchContacts","map","ContactFormContainer","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","INITIAL_STATE","useState","setName","setNumber","handleChange","target","value","console","log","reset","onSubmit","e","preventDefault","newContact","some","alert","addContact","onChange","pattern","title","required","Contacts"],"sourceRoot":""}